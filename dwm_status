#!/bin/sh

# Example `dwm_status` file. Place this file in your $PATH.

# Widget selection
#--------------------------------------------------------------------------------

# the widget delimiter ascii code (ascii code should match with code defined in dwm config.h):
DELIM_ASCII_CODE=32 # 32: ascii code for space

# the delimiter is derived form the ascii code:
DELIM=$(printf "\x$(printf %x $DELIM_ASCII_CODE)")

# folder where widgets and status bar will be cached:
CACHEDIR="$HOME/.cache/dwm_status"
mkdir -p "$CACHEDIR"

# The widget array determines which widgets are included in the status bar.
# Each included widget needs to be defined below by a function with the same name.

setstatus(){
    status \
    transmission \
    bluetooth \
    network \
    sshd \
    openconnect \
    cups \
    gpg \
    email \
    pacmanstatus \
    volume \
    brightness \
    battery \
    cpu \
    disk \
    calendar \
    clock \
    # wifi \
    # localip \
    # publicip \
}


# Parse arguments
#--------------------------------------------------------------------------------

usage(){
    >&2 echo "usage: dwm_status [widget-name|widget-index] [mouse-button-index 1|2|3]"
    >&2 echo ""
    >&2 echo "* without arguments: status bar is updated."
    >&2 echo "* with arguments: when a widget name OR widget-index is specified, a mouse button index (1,2,3) MUST be specified as well."
    >&2 echo ""
    exit "$1"
}

[ "$1" = "-h" ] || [ "$1" = "--help" ] && usage 0
WIDGET="$1"
BUTTON="$2"
if  [ -n "$WIDGET" ]; then
    [ -z "$BUTTON" ] && usage 1
    [ "$BUTTON" -ge 1 ] 2> /dev/null || usage 1
    [ "$BUTTON" -le 3 ] 2> /dev/null || usage 1
fi


# Status Command
#--------------------------------------------------------------------------------

# the status function pastes the output of each widget (defined below) together
# into the status bar of dwm (by using xsetroot).

status(){
    idx=0
    rootname=""
    tempdelim="#DELIM#" # temporary delimiter, will be replaced by $DELIM later on. Defining a temporary delimiter is necessary as it ensures one can use a normal space as delimiter.
    for widget in "$@"
    do
        out=$($widget)
        if [ -n "$out" ]; then
            if [ -n "$BUTTON" ] && [ "$WIDGET" -eq "$idx" ]; then
                "$widget$BUTTON" > /dev/null 2>/dev/null || usage 1
                out="$("$widget")"
            fi
            rootname="$rootname $out$tempdelim"
            idx=$((idx+1))
        fi
    done
    # unicode space U+2000:
    unicodespace=$(printf "$(printf '\\%o' $(printf %08x 0x2000 | sed 's/../0x& /g'))" | iconv -f UTF-32BE -t UTF-8)
    # replace all normal spaces by the unicode space (ascii space is reserved as a possible delimiter):
    rootname="$unicodespace$(echo "$rootname" | sed "s/[ ]/$unicodespace/g" | sed "s/$tempdelim/$DELIM/g" | sed "s/$DELIM\$//g" )$unicodespace"
    xsetroot -name "$rootname" > /dev/null 2>/dev/null
    echo "$rootname" > "$CACHEDIR/status" 2> /dev/null
}


# Helper functions
#--------------------------------------------------------------------------------

notifyservice(){
    name="$1"
    [ -z "$2" ] || icon="$2 "
    dte="$(date +'%a %Y-%m-%d')"
    tz="$(timedatectl | grep "Time zone" | sed 's/^[^(]*(\([^,]*\),.*/\1/g')"
    title="$(echo "$name" | sed 's/org.cups.cupsd/CUPS printer/g' | sed 's/^[ ]*//g' )"
    status="$(systemctl status "$name" | grep Active: | sed 's/^[^)]*)[ ]*//g' | sed "s/$dte //g" | sed "s/ $tz//g" | sed 's/;[ ]/\n/g' | sed 's/^[ ]*//g' )"
    suffix="\n[  +  + s: toggle any service ]"
    if systemctl is-active "$name" > /dev/null 2>/dev/null; then
        notify-send "$icon$title service 🔵" "\nactive $status\n\n[ middle click to stop ]$suffix"
    else
        notify-send "$icon$title service 🔴" "\ndead $status\n\n[ middle click to start ]$suffix"
    fi
}

toggleservice(){
    name=$1
    if systemctl is-active "$name" > /dev/null 2>/dev/null; then
        sudo -A -p "[sudo] password to stop $name.service" systemctl stop "$name"
    else
        sudo -A -p "[sudo] password to restart $name.service" systemctl start "$name"
    fi
}


# Widgets
#--------------------------------------------------------------------------------

# shows battery percentage left
battery(){ # battery
    pct=$(cat /sys/class/power_supply/BAT*/capacity | head -1)
    [ -z "$pct" ] && return
    batstatus=$(cat /sys/class/power_supply/BAT*/status | head -1)
    if [ "$batstatus" = "Discharging" ] > /dev/null 2>/dev/null; then
        [ "$pct" -gt 90 ] && echo " $pct%" && return
        [ "$pct" -gt 60 ] && echo " $pct%" && return
        [ "$pct" -gt 30 ] && echo " $pct%" && return
        [ "$pct" -gt  5 ] && echo " $pct%" && return
        echo " $pct%" && return
    fi
    echo " $pct%"
}
battery1(){ # mouse-button 1 action for battery widget
    pct="$(cat /sys/class/power_supply/BAT*/capacity | head -1)"
    batstatus=$(cat /sys/class/power_supply/BAT*/status | head -1)
    timeleft="   $(acpi -b | sed 's/.*,//g' | sed 's/^[ ]*//g' | sed 's/^00://g')"
    if [ "$batstatus" = "Discharging" ] > /dev/null 2>/dev/null; then
        [ "$pct" -gt 95 ] && notify-send "🔋 battery fully charged." "$timeleft" && return
        notify-send "🔋 battery discharging." "$timeleft"
        return
    fi
    [ "$pct" -gt 95 ] && notify-send "🔌 battery fully charged." && return
    notify-send "🔌 battery charging." "$timeleft"
}

# -----------

# control brightness
brightness(){ # screen brightness
    dir=/sys/class/backlight/intel_backlight
    if [ ! -d $dir ]; then
        echo ""
        return
    fi
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    python -c "print(' %.0f'%(100*$brightness/$max_brightness)+'%')"
}
brightness1(){ # mouse-button 1 action for brightness widget
    dir=/sys/class/backlight/intel_backlight
    max_brightness=$(cat $dir/max_brightness)
    brightness=$(cat $dir/brightness)
    brightness=$(python -c "print('%.0f'%(100*$brightness/$max_brightness)+'%')")
    notify-send "☀ brightness [$brightness]" "\n[  + F11: brightness up   ]\n[  + F12: brightness down ]"
}

# -----------

# show  if bluetooth is connected,  otherwise
bluetooth(){ # bluetooth
    [ ! -d /sys/class/bluetooth ] && echo "" && return
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]" | sed "s/.*\[\(.*\)\].*/\1/g")
    [ "$device" = "bluetooth" ] && echo  || echo 
}
bluetooth1(){ # mouse-button 1 action for bluetooth widget
    device=$(echo exit | bluetoothctl | grep -o -m 1 "\b\[.*\]" | sed "s/.*\[\(.*\)\].*/\1/g")
    if [ "$device" = "bluetooth" ]; then
        notify-send " Bluetooth disconnected" "\n[ middle click /  + b to connect ]"
    else
        notify-send " Bluetooth connected" "to $device\n\n[ middle click /  + b to disconnect ]"
    fi
}
bluetooth2(){ # mouse-button 1 action for bluetooth widget
    dmenu_bluetooth
}

# -----------

# shows the current date
calendar(){ # date
    date +' %Y-%m-%d'
}
calendar1(){ # mouse-button 1 action for date widget
    notify-send "📅 $(date +'%A, %B %d')" "\n$(cal | sed "s/\<$(date +%-d)\>//g")"
}

# -----------

# shows a clock
clock(){ # time
    date +' %H:%M'
}
clock1(){ # mouse-button 1 action for time widget
    notify-send "🕐 $(date +'%H:%M')"
    calendar1
}

# -----------

# shows cpu usage
cpu(){ # cpu
    read -r cpu a b c previdle rest < /proc/stat
    prevtotal=$((a+b+c+previdle))
    sleep 0.5
    read -r cpu a b c idle rest < /proc/stat
    total=$((a+b+c+idle))
    cpu=$((100*( (total-prevtotal) - (idle-previdle) ) / (total-prevtotal) ))
    echo " $cpu%"
}
cpu1(){ # mouse-button 1 action for cpu widget
    notify-send "$(cpu) cpu"
}

# -----------

# show icon if the CUPS printer service is running
cups(){ # CUPS printer status
    systemctl is-active org.cups.cupsd > /dev/null 2>/dev/null && echo 
}
cups1(){
    notifyservice org.cups.cupsd 🖨
}
cups2(){
    toggleservice org.cups.cupsd
}

# -----------

# uses same icon as memory. Know which one is which.
disk(){ # memory
    usage=$(df -h . | grep -v Filesystem | awk '{print $5}')
    echo " $usage"
}
disk1() { # mouse-button 1 action for memory widget
    notify-send "💾 disk usage: $(df -h "$HOME")"
}

# -----------

# show icon if a gpg key password is currently cached
gpg(){ # cached gpg keys
    gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" > /dev/null 2>/dev/null \
        && echo 
}
gpg1(){ # mouse-button 1 to display cached keys
    key=$(gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" | sed 's/.*KEYINFO\ *\([^\ !]*\).*/\1/g')
    notify-send "🔑 passwords cached for these gpg keys:" "$key\n\n[ middle click to empty cache ]"
}
gpg2(){ # mouse-button 2 to empty gpg password cache
    kill -SIGHUP "$(pidof gpg-agent)"
}


# -----------

# number of unread emails
email(){ # number of unread emails
    [ -f "$HOME/.msmtprc" ] || return
    if gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" > /dev/null 2>/dev/null;
    then
        num_unread=$(find "$HOME"/.local/share/email/*/INBOX/new/ -type f | wc -l 2> /dev/null)
        echo " $num_unread"
    else
        echo " "
    fi
}
email1(){ # give more email info
    num_unread=$(find "$HOME/.local/share/email/*/INBOX/new/" -type f | wc -l 2> /dev/null)
    if gpg-connect-agent 'keyinfo --list' /bye | grep "1 P" > /dev/null 2>/dev/null;
    then
        notify-send "📧 $num_unread unread emails" "\n[ middle click to sync now. ]\n[  +  + r: sync now      ]"
    else
        notify-send "📧 emails not syncing." "($num_unread unread emails)"
    fi
}

# -----------

# same info after clicking network icon
localip(){ # local ip address
    nmcli -a | grep inet4 | sed 's/^[^ ]*[ ]\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*/\1/g' | head -1
}
localip1(){
    network1
}

# -----------

# uses same icon as disk. Know which one is which.
memory(){ # memory
    used=$(free | awk '/Mem/ {print $3 }')
    total=$(free | awk '/Mem/ {print $2 }')
    percentage=$(python -c "print(f'{100*$used/$total:.0f}%')")
    echo " $percentage"
}
memory1() { # mouse-button 1 action for memory widget
    mem=$(free | awk '/Mem/ {printf "%d MiB/%d MiB\n", $3 / 1024.0, $2 / 1024.0 }')
    notify-send "💾 free RAM $mem"
}

# -----------

# shows a clickable globe icon.
network(){
    echo 
}
network1(){
    notify-send "🌐 Network:" "connected to: $(wifi)\nlocal ip:     $(localip)\npublic ip:    $(publicip)"
}

# -----------

# show icon if openconnect is connected
openconnect(){ # openconnect
    pidof openconnect > /dev/null 2>/dev/null && echo   #|| echo ""
}
openconnect1(){ # mouse-button 1 action for openconnect widget
    if pidof openconnect > /dev/null 2>/dev/null; then
       notify-send "🔐 openconnect" "running.\n\n[ middle click to stop ]"
    else
        notify-send "🔐 openconnect" "stopped.\n\n[ middle click to start ]"
    fi
}
openconnect2(){ # mouse-button 1 action for openconnect widget
    pidof openconnect > /dev/null 2>/dev/null && sudo -A killall openconnect
}

# -----------

# number of updatable packages
pacmanstatus(){ # pacman
    num=$(pacman -Qu | wc -l)
    [ "$num" -gt 0 ] && echo " $num"
}
pacmanstatus1(){ # pacman
    num=$(pacman -Qu | wc -l)
    notify-send "📦 pacman" "$num packages can be updated\n\n[ middle click to update with \"pacman -Syu\" ]"
}
pacmanstatus2(){ # update packages
    sudo -A -p "[sudo] password for 'pacman -Syu'" "$TERMINAL" -n float -e pacman -Syu
}

# -----------

# introduces lag due to curl call better not to place in status bar.
publicip(){ # local ip address
    curl -s https://ipinfo.io/ip | head -1
}
publicip1(){
    network1
}


# -----------

# show icon if sshd service is active
sshd(){ # ssh daemon
    systemctl is-active sshd > /dev/null 2>/dev/null && echo  # ⛓
}
sshd1(){ # mouse-button 1 action for ssh daemon widget
    notifyservice sshd ⛓
}
sshd2(){
    toggleservice sshd
}

# -----------

# torrenting status
transmission(){
    pidof transmission-daemon > /dev/null 2>/dev/null || return
    if transmission-remote --list \
        | grep -v ID | grep -v Sum:\
        | awk  '{ print $2;}' \
        | sed '/100%/d' | sed 's/%//g' | sed 's|n/a||g' \
        | xargs python -c "from sys import argv; print(f' {sum(int(i) for i in argv[1:])/len(argv[1:]):.0f}%')" 2> /dev/null;
    then
        num=$(transmission-remote --list | grep -v ID | grep -vc Sum:)
        [ "$num" -gt 0 ] && echo "🌱$num" && return # seeding
        echo  # active
    fi
}
transmission1(){
    num="$(transmission-remote --list | grep -v ID | grep -vc Sum:)"
    title="$(transmission) Transmission: $(transmission | sed 's//active/g' | sed 's/🌱/seeding/g') [$num]"
    msg="\n[ middle click to open transmission-cli   ]\n[ right click to stop transmission-daemon ]"
    [ "$num" -gt 0 ] && msg="\n$(transmission-remote --list)\n$msg"
    notify-send "$title" "$msg"
}
transmission2(){
    $TERMINAL -e "$HOME/.local/bin/transmission"
}
transmission3(){
    kill -SIGTERM "$(pidof transmission-daemon)"
}


# -----------

# volume (managed by pulseaudio)
volume(){ # volume
    pct=$(amixer -D pulse get Master | grep "\[on\]" | head -1 | sed "s/^[^\[]*\[\([^%]*\)*%.*/\1/g") || echo 🔇 && return
    [ "$pct" -gt 60 ] && echo "🔊$pct%" && return
    [ "$pct" -gt 20 ] && echo "🔉$pct%" && return
    echo "🔈$pct%"
}
volume1(){ # mouse-button 1 action for volume widget
    icon=$(volume | sed 's/^\(.\).*/\1/g')
    pct=$(volume | sed 's/^.\(.*\)/\1/g' | sed 's/^[ ]*//g')
    notify-send "$icon volume $pct" "\n[  + : volume up   ]\n[  + : volume down ]\n[  +  + : mute    ]"
}

# -----------

# same info after clicking network icon
wifi(){
    nmcli | grep "connected to" | sed 's/.*connected to //g' | head -1
}
wifi1(){
    network1
}

# -----------

# Set Status
#--------------------------------------------------------------------------------
setstatus
